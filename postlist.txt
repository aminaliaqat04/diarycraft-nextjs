"use client";

import Link from "next/link";
import { useState } from "react";
import type { Post } from "@/types";

type PostListProps = {
  postlist: Post[];
};

export function PostList({ postlist }: PostListProps) {
  const [draggedPost, setDraggedPost] = useState<Post | null>(null);
  const [dropPost, setDropPost] = useState<Post | null>(null);
  const [posts, setPosts] = useState<Post[]>(postlist);
  const [dropZonePosts, setDropZonePosts] = useState<Post[]>([]);

  const handleDragStart = (post: Post) => {
    setDraggedPost(post);
  };

  const handleDragOver = (
    event: React.DragEvent<HTMLDivElement>,
    post: Post
  ) => {
    event.preventDefault();
    if (draggedPost?.id !== post.id) {
      setDropPost(post);
    }
  };

  const handleDrop = () => {
    console.log("here 1");
    if (!draggedPost) return;

    console.log("here 2");
    if (dropPost) {
      console.log("found");
      if (draggedPost.id !== dropPost.id) {
        const updatedPosts = [...posts];
        const draggedIndex = updatedPosts.findIndex(
          (post) => post.id === draggedPost.id
        );
        const dropTargetIndex = updatedPosts.findIndex(
          (post) => post.id === dropPost.id
        );

        const removedPost = updatedPosts.splice(draggedIndex, 1)[0];

        updatedPosts.splice(dropTargetIndex, 0, removedPost);

        setPosts(updatedPosts);
      }
    } else {
      console.log("here");

      const updatedPosts = [...posts];
      const draggedIndex = updatedPosts.findIndex(
        (post) => post.id === draggedPost.id
      );
      updatedPosts.splice(draggedIndex, 1);

      setDropZonePosts((prevDropZonePosts) => [
        ...prevDropZonePosts,
        draggedPost,
      ]);
      setPosts(updatedPosts);
    }

    setDraggedPost(null);
    setDropPost(null);
  };

  return (
    <div className="flex gap-10 justify-between">
      <div className="grid grid-cols-1 gap-5" onDrop={handleDrop}>
        {posts.map((post: Post) => (
          <div
            key={post.id}
            draggable
            onDragStart={() => handleDragStart(post)}
            onDragOver={(e) => handleDragOver(e, post)}
            className={`border rounded-md min-h-[5rem] md:text-xl flex items-center justify-center text-center bg-gray-300 px-12 md:px-10 d`}
          >
            <Link href={`/posts/${post.id}`}>{post.title}</Link>
          </div>
        ))}
      </div>
      <div className="grid grid-cols-1 gap-5 w-1/2 justify-center border" onDragOver={e => e.preventDefault()}
        onDrop={handleDrop}>
        <p className="font-semibold uppercase text-2xl">Drop Zone</p>
        {dropZonePosts.map((post: Post) => (
          <div key={post.id} className="dropzone-post">
            {post.title}
          </div>
        ))}
      </div>
    </div>
  );
}
